{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products\n  };\n}\nexport function createProductSuccess(product) {\n  return {\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function updateProductSuccess(product) {\n  return {\n    type: actionTypes.UPDATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products/\" + (product.id || \"\"), {\n    method: product.id ? \"PUT\" : \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(product)\n  }).then(handleResponse).catch(handleError);\n}\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product).then(savedProduct => {\n      product.id ? dispatch(updateProductSuccess(savedProduct)) : dispatch(createProductSuccess(savedProduct));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json();\n  }\n  const error = await response.text();\n  throw new Error(error);\n}\nexport function handleError(error) {\n  console.error(\"Bir hata oluştu\");\n  throw error;\n}\nexport function getProducts(categoryId) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n    if (categoryId) {\n      url = url + \"?categoryId=\" + categoryId;\n    }\n    return fetch(url).then(response => response.json()).then(result => dispatch(getProductsSuccess(result)));\n  };\n}","map":{"version":3,"names":["actionTypes","getProductsSuccess","products","type","GET_PRODUCTS_SUCCESS","payload","createProductSuccess","product","CREATE_PRODUCT_SUCCESS","updateProductSuccess","UPDATE_PRODUCT_SUCCESS","saveProductApi","fetch","id","method","headers","body","JSON","stringify","then","handleResponse","catch","handleError","saveProduct","dispatch","savedProduct","error","response","ok","json","text","Error","console","getProducts","categoryId","url","result"],"sources":["C:/Users/RP-MSI/Documents/ReactCourse/react-lessons/13062023/src/redux/actions/productActions.js"],"sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function getProductsSuccess(products) {\r\n  return { type: actionTypes.GET_PRODUCTS_SUCCESS, payload: products };\r\n}\r\n\r\nexport function createProductSuccess(product) {\r\n  return { type: actionTypes.CREATE_PRODUCT_SUCCESS, payload: product };\r\n}\r\n\r\nexport function updateProductSuccess(product) {\r\n  return { type: actionTypes.UPDATE_PRODUCT_SUCCESS, payload: product };\r\n}\r\n\r\nexport function saveProductApi(product) {\r\n  return fetch(\"http://localhost:3000/products/\" + (product.id || \"\"), {\r\n    method: product.id ? \"PUT\" : \"POST\",\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify(product)\r\n  })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function saveProduct(product) {\r\n  return function(dispatch) {\r\n    return saveProductApi(product)\r\n      .then(savedProduct => {\r\n        product.id\r\n          ? dispatch(updateProductSuccess(savedProduct))\r\n          : dispatch(createProductSuccess(savedProduct));\r\n      })\r\n      .catch(error => {\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\nexport async function handleResponse(response){\r\n  if(response.ok){\r\n    return response.json()\r\n  }\r\n\r\n  const error = await response.text()\r\n  throw new Error(error)\r\n}\r\n\r\nexport function handleError(error){\r\n  console.error(\"Bir hata oluştu\")\r\n  throw error;\r\n}\r\n\r\nexport function getProducts(categoryId) {\r\n  return function(dispatch) {\r\n    let url = \"http://localhost:3000/products\";\r\n    if (categoryId) {\r\n      url = url + \"?categoryId=\" + categoryId;\r\n    }\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(result => dispatch(getProductsSuccess(result)));\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,eAAe;AAE5C,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EAC3C,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACI,oBAAoB;IAAEC,OAAO,EAAEH;EAAS,CAAC;AACtE;AAEA,OAAO,SAASI,oBAAoBA,CAACC,OAAO,EAAE;EAC5C,OAAO;IAAEJ,IAAI,EAAEH,WAAW,CAACQ,sBAAsB;IAAEH,OAAO,EAAEE;EAAQ,CAAC;AACvE;AAEA,OAAO,SAASE,oBAAoBA,CAACF,OAAO,EAAE;EAC5C,OAAO;IAAEJ,IAAI,EAAEH,WAAW,CAACU,sBAAsB;IAAEL,OAAO,EAAEE;EAAQ,CAAC;AACvE;AAEA,OAAO,SAASI,cAAcA,CAACJ,OAAO,EAAE;EACtC,OAAOK,KAAK,CAAC,iCAAiC,IAAIL,OAAO,CAACM,EAAE,IAAI,EAAE,CAAC,EAAE;IACnEC,MAAM,EAAEP,OAAO,CAACM,EAAE,GAAG,KAAK,GAAG,MAAM;IACnCE,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,OAAO;EAC9B,CAAC,CAAC,CACCY,IAAI,CAACC,cAAc,CAAC,CACpBC,KAAK,CAACC,WAAW,CAAC;AACvB;AAEA,OAAO,SAASC,WAAWA,CAAChB,OAAO,EAAE;EACnC,OAAO,UAASiB,QAAQ,EAAE;IACxB,OAAOb,cAAc,CAACJ,OAAO,CAAC,CAC3BY,IAAI,CAACM,YAAY,IAAI;MACpBlB,OAAO,CAACM,EAAE,GACNW,QAAQ,CAACf,oBAAoB,CAACgB,YAAY,CAAC,CAAC,GAC5CD,QAAQ,CAAClB,oBAAoB,CAACmB,YAAY,CAAC,CAAC;IAClD,CAAC,CAAC,CACDJ,KAAK,CAACK,KAAK,IAAI;MACd,MAAMA,KAAK;IACb,CAAC,CAAC;EACN,CAAC;AACH;AAEA,OAAO,eAAeN,cAAcA,CAACO,QAAQ,EAAC;EAC5C,IAAGA,QAAQ,CAACC,EAAE,EAAC;IACb,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMH,KAAK,GAAG,MAAMC,QAAQ,CAACG,IAAI,CAAC,CAAC;EACnC,MAAM,IAAIC,KAAK,CAACL,KAAK,CAAC;AACxB;AAEA,OAAO,SAASJ,WAAWA,CAACI,KAAK,EAAC;EAChCM,OAAO,CAACN,KAAK,CAAC,iBAAiB,CAAC;EAChC,MAAMA,KAAK;AACb;AAEA,OAAO,SAASO,WAAWA,CAACC,UAAU,EAAE;EACtC,OAAO,UAASV,QAAQ,EAAE;IACxB,IAAIW,GAAG,GAAG,gCAAgC;IAC1C,IAAID,UAAU,EAAE;MACdC,GAAG,GAAGA,GAAG,GAAG,cAAc,GAAGD,UAAU;IACzC;IACA,OAAOtB,KAAK,CAACuB,GAAG,CAAC,CACdhB,IAAI,CAACQ,QAAQ,IAAIA,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CACjCV,IAAI,CAACiB,MAAM,IAAIZ,QAAQ,CAACvB,kBAAkB,CAACmC,MAAM,CAAC,CAAC,CAAC;EACzD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}